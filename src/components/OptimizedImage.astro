---
// OptimizedImage.astro - Lazy loading image component with WebP support
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  class?: string;
  sizes?: string;
  priority?: boolean;
  quality?: number;
}

const {
  src,
  alt,
  width,
  height,
  loading = 'lazy',
  class: className = '',
  sizes,
  priority = false,
  quality = 80,
  ...props
} = Astro.props;

// Mobile-first responsive breakpoints (prioritize mobile sizes)
const mobileFirstSizes = [320, 480, 640, 768, 1024, 1280, 1920];

// Generate responsive image sizes with mobile-first optimization and quality suffix
const generateSrcSet = (baseSrc: string, sizes: number[], format: 'webp' | 'jpg' = 'webp') => {
  const quality = format === 'webp' ? 60 : 70; // Match optimization script quality
  return sizes.map(size => {
    const extension = format === 'webp' ? '.webp' : '.jpg';
    const optimizedSrc = baseSrc.replace('/original/', '/optimized/').replace(/\.(png|jpg|jpeg)$/, `_${size}q${quality}${extension}`);
    return `${optimizedSrc} ${size}w`;
  }).join(', ');
};

// Generate WebP srcset for modern browsers (mobile-first)
const webpSrcSet = generateSrcSet(src, mobileFirstSizes, 'webp');

// Generate fallback srcset for older browsers  
const fallbackSrcSet = generateSrcSet(src, mobileFirstSizes, 'jpg');

// Mobile-first sizes attribute (optimize for mobile viewport)
const mobileFirstSizesAttr = sizes || '(max-width: 480px) 100vw, (max-width: 768px) 90vw, (max-width: 1024px) 50vw, 33vw';

// Optimized main image source - use smaller default for mobile LCP with quality suffix
const mobileOptimizedSrc = src.replace('/original/', '/optimized/').replace(/\.(png|jpg|jpeg)$/, '_640q60.webp');
const mobileFallbackSrc = src.replace('/original/', '/optimized/').replace(/\.(png|jpg|jpeg)$/, '_640q70.jpg');
---

<picture class={`optimized-image ${className}`}>
  <!-- WebP sources for modern browsers (mobile-first) -->
  <source 
    srcset={webpSrcSet}
    sizes={mobileFirstSizesAttr}
    type="image/webp"
  />
  
  <!-- Fallback JPEG sources -->
  <source 
    srcset={fallbackSrcSet}
    sizes={mobileFirstSizesAttr}
    type="image/jpeg"
  />
  
  <!-- Final fallback img tag (mobile-optimized) -->
  <img 
    src={mobileFallbackSrc}
    alt={alt}
    width={width || 640}
    height={height || 480}
    loading={priority ? 'eager' : loading}
    decoding="async"
    fetchpriority={priority ? 'high' : 'auto'}
    class={className}
    {...props}
  />
</picture>

<style>
  .optimized-image {
    display: block;
  }
  
  .optimized-image img {
    max-width: 100%;
    height: auto;
  }
  
  /* Lazy loading enhancement with CSS */
  .optimized-image img[loading="lazy"] {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }
  
  .optimized-image img[loading="lazy"].loaded {
    opacity: 1;
  }
  
  /* Blur-up loading effect */
  .optimized-image::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, #f5f5f5, #eeeeee);
    opacity: 1;
    transition: opacity 0.3s ease-in-out;
  }
  
  .optimized-image.loaded::before {
    opacity: 0;
  }
</style>

<!-- JavaScript removed to prevent separate file generation -->